/*! For license information please see toast-stories.ba09e6f7.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkmy_v0_project=self.webpackChunkmy_v0_project||[]).push([[832],{"./components/ui/button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");function setRef(ref,value){if("function"==typeof ref)return ref(value);null!=ref&&(ref.current=value)}function composeRefs(...refs){return node=>{let hasCleanup=!1;const cleanups=refs.map((ref=>{const cleanup=setRef(ref,node);return hasCleanup||"function"!=typeof cleanup||(hasCleanup=!0),cleanup}));if(hasCleanup)return()=>{for(let i=0;i<cleanups.length;i++){const cleanup=cleanups[i];"function"==typeof cleanup?cleanup():setRef(refs[i],null)}}}}var Slot=react.forwardRef(((props,forwardedRef)=>{const{children,...slotProps}=props,childrenArray=react.Children.toArray(children),slottable=childrenArray.find(isSlottable);if(slottable){const newElement=slottable.props.children,newChildren=childrenArray.map((child=>child===slottable?react.Children.count(newElement)>1?react.Children.only(null):react.isValidElement(newElement)?newElement.props.children:null:child));return(0,jsx_runtime.jsx)(SlotClone,{...slotProps,ref:forwardedRef,children:react.isValidElement(newElement)?react.cloneElement(newElement,void 0,newChildren):null})}return(0,jsx_runtime.jsx)(SlotClone,{...slotProps,ref:forwardedRef,children})}));Slot.displayName="Slot";var SlotClone=react.forwardRef(((props,forwardedRef)=>{const{children,...slotProps}=props;if(react.isValidElement(children)){const childrenRef=function getElementRef(element){let getter=Object.getOwnPropertyDescriptor(element.props,"ref")?.get,mayWarn=getter&&"isReactWarning"in getter&&getter.isReactWarning;if(mayWarn)return element.ref;if(getter=Object.getOwnPropertyDescriptor(element,"ref")?.get,mayWarn=getter&&"isReactWarning"in getter&&getter.isReactWarning,mayWarn)return element.props.ref;return element.props.ref||element.ref}(children);return react.cloneElement(children,{...mergeProps(slotProps,children.props),ref:forwardedRef?composeRefs(forwardedRef,childrenRef):childrenRef})}return react.Children.count(children)>1?react.Children.only(null):null}));SlotClone.displayName="SlotClone";var Slottable=({children})=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children});function isSlottable(child){return react.isValidElement(child)&&child.type===Slottable}function mergeProps(slotProps,childProps){const overrideProps={...childProps};for(const propName in childProps){const slotPropValue=slotProps[propName],childPropValue=childProps[propName];/^on[A-Z]/.test(propName)?slotPropValue&&childPropValue?overrideProps[propName]=(...args)=>{childPropValue(...args),slotPropValue(...args)}:slotPropValue&&(overrideProps[propName]=slotPropValue):"style"===propName?overrideProps[propName]={...slotPropValue,...childPropValue}:"className"===propName&&(overrideProps[propName]=[slotPropValue,childPropValue].filter(Boolean).join(" "))}return{...slotProps,...overrideProps}}var clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs");const falsyToString=value=>"boolean"==typeof value?`${value}`:0===value?"0":value,cx=clsx.$;var utils=__webpack_require__("./lib/utils.ts");const buttonVariants=(base="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",config={variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}},props=>{var _config_compoundVariants;if(null==(null==config?void 0:config.variants))return cx(base,null==props?void 0:props.class,null==props?void 0:props.className);const{variants,defaultVariants}=config,getVariantClassNames=Object.keys(variants).map((variant=>{const variantProp=null==props?void 0:props[variant],defaultVariantProp=null==defaultVariants?void 0:defaultVariants[variant];if(null===variantProp)return null;const variantKey=falsyToString(variantProp)||falsyToString(defaultVariantProp);return variants[variant][variantKey]})),propsWithoutUndefined=props&&Object.entries(props).reduce(((acc,param)=>{let[key,value]=param;return void 0===value||(acc[key]=value),acc}),{}),getCompoundVariantClassNames=null==config||null===(_config_compoundVariants=config.compoundVariants)||void 0===_config_compoundVariants?void 0:_config_compoundVariants.reduce(((acc,param)=>{let{class:cvClass,className:cvClassName,...compoundVariantOptions}=param;return Object.entries(compoundVariantOptions).every((param=>{let[key,value]=param;return Array.isArray(value)?value.includes({...defaultVariants,...propsWithoutUndefined}[key]):{...defaultVariants,...propsWithoutUndefined}[key]===value}))?[...acc,cvClass,cvClassName]:acc}),[]);return cx(base,getVariantClassNames,getCompoundVariantClassNames,null==props?void 0:props.class,null==props?void 0:props.className)});var base,config;const Button=react.forwardRef((({className,variant,size,asChild=!1,...props},ref)=>{const Comp=asChild?Slot:"button";return(0,jsx_runtime.jsx)(Comp,{className:(0,utils.cn)(buttonVariants({variant,size,className})),ref,...props})}));Button.displayName="Button",Button.__docgenInfo={description:"",methods:[],displayName:"Button",props:{asChild:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}}},composes:["VariantProps"]}},"./lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tailwind-merge/dist/bundle-mjs.mjs");function cn(...inputs){return(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))}},"./node_modules/lucide-react/dist/esm/createLucideIcon.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>createLucideIcon});var react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const mergeClasses=(...classes)=>classes.filter(((className,index,array)=>Boolean(className)&&""!==className.trim()&&array.indexOf(className)===index)).join(" ").trim();var defaultAttributes={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const Icon=(0,react.forwardRef)((({color="currentColor",size=24,strokeWidth=2,absoluteStrokeWidth,className="",children,iconNode,...rest},ref)=>(0,react.createElement)("svg",{ref,...defaultAttributes,width:size,height:size,stroke:color,strokeWidth:absoluteStrokeWidth?24*Number(strokeWidth)/Number(size):strokeWidth,className:mergeClasses("lucide",className),...rest},[...iconNode.map((([tag,attrs])=>(0,react.createElement)(tag,attrs))),...Array.isArray(children)?children:[children]]))),createLucideIcon=(iconName,iconNode)=>{const Component=(0,react.forwardRef)((({className,...props},ref)=>{return(0,react.createElement)(Icon,{ref,iconNode,className:mergeClasses(`lucide-${string=iconName,string.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,className),...props});var string}));return Component.displayName=`${iconName}`,Component}},"./node_modules/lucide-react/dist/esm/icons/x.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>X});const X=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]])},"./stories/toast.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomDuration:()=>CustomDuration,Default:()=>Default,MultipleToasts:()=>MultipleToasts,StatusVariants:()=>StatusVariants,ToastUsageExample:()=>ToastUsageExample,WithAction:()=>WithAction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>toast_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),createLucideIcon=__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js");const Info=(0,createLucideIcon.A)("Info",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 16v-4",key:"1dtifu"}],["path",{d:"M12 8h.01",key:"e9boi3"}]]),CircleCheckBig=(0,createLucideIcon.A)("CircleCheckBig",[["path",{d:"M21.801 10A10 10 0 1 1 17 3.335",key:"yps3ct"}],["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}]]),TriangleAlert=(0,createLucideIcon.A)("TriangleAlert",[["path",{d:"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",key:"wmoenq"}],["path",{d:"M12 9v4",key:"juzpu7"}],["path",{d:"M12 17h.01",key:"p32p05"}]]),CircleAlert=(0,createLucideIcon.A)("CircleAlert",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["line",{x1:"12",x2:"12",y1:"8",y2:"12",key:"1pkeuh"}],["line",{x1:"12",x2:"12.01",y1:"16",y2:"16",key:"4dfq90"}]]);var x=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/x.js"),utils=__webpack_require__("./lib/utils.ts"),react_dom=__webpack_require__("./node_modules/next/dist/compiled/react-dom/index.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const ToastContext=(0,react.createContext)(void 0);let toastFunctions;function ToastProvider({children}){const[toasts,setToasts]=(0,react.useState)([]),[isMounted,setIsMounted]=(0,react.useState)(!1);(0,react.useEffect)((()=>(setIsMounted(!0),()=>setIsMounted(!1))),[]);const removeToast=id=>{setToasts((prev=>{var _toast_onClose;const toast=prev.find((t=>t.id===id));return null==toast||null===(_toast_onClose=toast.onClose)||void 0===_toast_onClose||_toast_onClose.call(toast),prev.filter((t=>t.id!==id))}))},contextValue={toasts,addToast:toast=>{const id=Math.random().toString(36).substring(2,9),newToast={id,...toast};return setToasts((prev=>[...prev,newToast])),toast.duration!==Number.POSITIVE_INFINITY&&setTimeout((()=>{removeToast(id)}),toast.duration||5e3),id},removeToast,updateToast:(id,toast)=>{setToasts((prev=>prev.map((t=>t.id===id?{...t,...toast}:t))))}};return toastFunctions=contextValue,isMounted?(0,jsx_runtime.jsxs)(ToastContext.Provider,{value:contextValue,children:[children,isMounted&&(0,react_dom.createPortal)((0,jsx_runtime.jsx)(ToastContainer,{}),document.body)]}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children})}function ToastContainer(){const context=(0,react.useContext)(ToastContext);if(!context)return null;const{toasts,removeToast}=context;return 0===toasts.length?null:(0,jsx_runtime.jsx)("div",{className:"fixed bottom-0 right-0 z-50 flex flex-col gap-2 p-4 md:max-w-[420px]",role:"region","aria-label":"Notifications",children:toasts.map((toast=>(0,jsx_runtime.jsx)(ToastItem,{toast,onClose:()=>removeToast(toast.id)},toast.id)))})}function ToastItem({toast,onClose}){const statusIcons={info:(0,jsx_runtime.jsx)(Info,{className:"h-5 w-5 text-blue-500"}),success:(0,jsx_runtime.jsx)(CircleCheckBig,{className:"h-5 w-5 text-green-500"}),warning:(0,jsx_runtime.jsx)(TriangleAlert,{className:"h-5 w-5 text-amber-500"}),error:(0,jsx_runtime.jsx)(CircleAlert,{className:"h-5 w-5 text-red-500"})};return(0,jsx_runtime.jsxs)("div",{className:(0,utils.cn)("flex w-full items-start gap-3 rounded-lg border-l-4 bg-background p-4 shadow-md animate-in slide-in-from-right-full",toast.status&&{info:"border-blue-500 bg-blue-50 dark:bg-blue-950 dark:border-blue-800",success:"border-green-500 bg-green-50 dark:bg-green-950 dark:border-green-800",warning:"border-amber-500 bg-amber-50 dark:bg-amber-950 dark:border-amber-800",error:"border-red-500 bg-red-50 dark:bg-red-950 dark:border-red-800"}[toast.status]),role:"alert","aria-live":"error"===toast.status?"assertive":"polite",children:[toast.status&&statusIcons[toast.status],(0,jsx_runtime.jsxs)("div",{className:"flex-1 space-y-1",children:[toast.title&&(0,jsx_runtime.jsx)("div",{className:"font-medium leading-none tracking-tight",children:toast.title}),toast.description&&(0,jsx_runtime.jsx)("div",{className:"text-sm text-muted-foreground",children:toast.description}),toast.action&&(0,jsx_runtime.jsx)("div",{className:"mt-2",children:toast.action})]}),(0,jsx_runtime.jsx)("button",{onClick:onClose,className:"shrink-0 rounded-md p-1 text-foreground/50 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2","aria-label":"Close notification",children:(0,jsx_runtime.jsx)(x.A,{className:"h-4 w-4"})})]})}const toast_show=props=>toastFunctions?toastFunctions.addToast(props):(console.warn("Toast provider not mounted yet"),""),toast_info=props=>toastFunctions?toastFunctions.addToast({...props,status:"info"}):(console.warn("Toast provider not mounted yet"),""),toast_success=props=>toastFunctions?toastFunctions.addToast({...props,status:"success"}):(console.warn("Toast provider not mounted yet"),""),toast_warning=props=>toastFunctions?toastFunctions.addToast({...props,status:"warning"}):(console.warn("Toast provider not mounted yet"),""),toast_error=props=>toastFunctions?toastFunctions.addToast({...props,status:"error"}):(console.warn("Toast provider not mounted yet"),""),toast_update=(id,props)=>{toastFunctions?toastFunctions.updateToast(id,props):console.warn("Toast provider not mounted yet")};ToastProvider.__docgenInfo={description:"",methods:[],displayName:"ToastProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};var ui_button=__webpack_require__("./components/ui/button.tsx");const toast_stories={title:"Feedback/Toast",parameters:{layout:"centered"},tags:["autodocs"],decorators:[Story=>(0,jsx_runtime.jsx)(ToastProvider,{children:(0,jsx_runtime.jsx)(Story,{})})]},Default={render:()=>{const ToastDemo=()=>{const{addToast}=function useToast(){const context=(0,react.useContext)(ToastContext);if(!context)throw new Error("useToast must be used within a ToastProvider");return context}();return(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>{addToast({title:"Toast Notification",description:"This is a default toast notification",duration:5e3})},children:"Show Toast"})};return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"Default toast notification with title and description."}}}},StatusVariants={render:()=>{const ToastDemo=()=>(0,jsx_runtime.jsxs)("div",{className:"flex flex-col gap-2",children:[(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_info({title:"Information",description:"This is an informational message"}),variant:"outline",children:"Info Toast"}),(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_success({title:"Success",description:"Operation completed successfully"}),variant:"outline",children:"Success Toast"}),(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_warning({title:"Warning",description:"This action might cause issues"}),variant:"outline",children:"Warning Toast"}),(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_error({title:"Error",description:"An error occurred during the operation"}),variant:"outline",children:"Error Toast"})]});return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"Toast notifications with different status variants: info, success, warning, and error."}}}},WithAction={render:()=>{const ToastDemo=()=>(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>{toast_show({title:"Update Available",description:"A new version is available. Would you like to update now?",duration:1e4,action:(0,jsx_runtime.jsxs)("div",{className:"flex gap-2 mt-2",children:[(0,jsx_runtime.jsx)(ui_button.$,{size:"sm",variant:"outline",onClick:()=>toast_success({title:"Updated",description:"Application has been updated successfully"}),children:"Update"}),(0,jsx_runtime.jsx)(ui_button.$,{size:"sm",variant:"ghost",children:"Later"})]})})},children:"Show Toast with Action"});return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"Toast notification with action buttons that the user can interact with."}}}},CustomDuration={render:()=>{const ToastDemo=()=>(0,jsx_runtime.jsxs)("div",{className:"flex flex-col gap-2",children:[(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_show({title:"Quick Toast",description:"This toast will disappear in 2 seconds",duration:2e3}),variant:"outline",children:"Short Duration (2s)"}),(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>toast_show({title:"Persistent Toast",description:"This toast will stay until dismissed",duration:Number.POSITIVE_INFINITY}),variant:"outline",children:"Persistent Toast"})]});return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"Toast notifications with custom durations, including a persistent toast that stays until dismissed."}}}},MultipleToasts={render:()=>{const ToastDemo=()=>(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>{toast_info({title:"Process Started",description:"Your request is being processed"}),setTimeout((()=>{toast_success({title:"Step 1 Complete",description:"First step completed successfully"})}),1e3),setTimeout((()=>{toast_success({title:"Step 2 Complete",description:"Second step completed successfully"})}),2e3),setTimeout((()=>{toast_success({title:"Process Complete",description:"All steps completed successfully"})}),3e3)},children:"Show Multiple Toasts"});return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"Demonstrating how multiple toast notifications stack and appear in sequence."}}}},ToastUsageExample={render:()=>{const ToastDemo=()=>(0,jsx_runtime.jsxs)("div",{className:"p-6 border rounded-lg space-y-4",children:[(0,jsx_runtime.jsx)("h2",{className:"text-xl font-semibold",children:"File Upload Example"}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-2",children:[(0,jsx_runtime.jsx)(ui_button.$,{onClick:()=>{const id=toast_info({title:"Uploading File",description:"Starting upload process...",duration:Number.POSITIVE_INFINITY});setTimeout((()=>{toast_update(id,{description:"Uploading: 25% complete"})}),1e3),setTimeout((()=>{toast_update(id,{description:"Uploading: 50% complete"})}),2e3),setTimeout((()=>{toast_update(id,{description:"Uploading: 75% complete"})}),3e3),setTimeout((()=>{toast_update(id,{title:"Upload Complete",description:"Your file has been uploaded successfully",status:"success",duration:3e3})}),4e3)},children:"Upload File"}),(0,jsx_runtime.jsx)(ui_button.$,{variant:"outline",onClick:()=>toast_error({title:"Upload Failed",description:"There was an error uploading your file. Please try again."}),children:"Simulate Error"})]})]});return(0,jsx_runtime.jsx)(ToastDemo,{})},parameters:{docs:{description:{story:"A practical example showing how toasts can be used in a file upload scenario with progress updates."}}}},__namedExportsOrder=["Default","StatusVariants","WithAction","CustomDuration","MultipleToasts","ToastUsageExample"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      const {\n        addToast\n      } = useToast();\n      const showToast = () => {\n        addToast({\n          title: "Toast Notification",\n          description: "This is a default toast notification",\n          duration: 5000\n        });\n      };\n      return <Button onClick={showToast}>Show Toast</Button>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Default toast notification with title and description."\n      }\n    }\n  }\n}',...Default.parameters?.docs?.source}}},StatusVariants.parameters={...StatusVariants.parameters,docs:{...StatusVariants.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      return <div className="flex flex-col gap-2">\r\n          <Button onClick={() => toast.info({\n          title: "Information",\n          description: "This is an informational message"\n        })} variant="outline">\r\n            Info Toast\r\n          </Button>\r\n          <Button onClick={() => toast.success({\n          title: "Success",\n          description: "Operation completed successfully"\n        })} variant="outline">\r\n            Success Toast\r\n          </Button>\r\n          <Button onClick={() => toast.warning({\n          title: "Warning",\n          description: "This action might cause issues"\n        })} variant="outline">\r\n            Warning Toast\r\n          </Button>\r\n          <Button onClick={() => toast.error({\n          title: "Error",\n          description: "An error occurred during the operation"\n        })} variant="outline">\r\n            Error Toast\r\n          </Button>\r\n        </div>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Toast notifications with different status variants: info, success, warning, and error."\n      }\n    }\n  }\n}',...StatusVariants.parameters?.docs?.source}}},WithAction.parameters={...WithAction.parameters,docs:{...WithAction.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      const showToast = () => {\n        toast.show({\n          title: "Update Available",\n          description: "A new version is available. Would you like to update now?",\n          duration: 10000,\n          action: <div className="flex gap-2 mt-2">\r\n              <Button size="sm" variant="outline" onClick={() => toast.success({\n              title: "Updated",\n              description: "Application has been updated successfully"\n            })}>\r\n                Update\r\n              </Button>\r\n              <Button size="sm" variant="ghost">\r\n                Later\r\n              </Button>\r\n            </div>\n        });\n      };\n      return <Button onClick={showToast}>Show Toast with Action</Button>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Toast notification with action buttons that the user can interact with."\n      }\n    }\n  }\n}',...WithAction.parameters?.docs?.source}}},CustomDuration.parameters={...CustomDuration.parameters,docs:{...CustomDuration.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      return <div className="flex flex-col gap-2">\r\n          <Button onClick={() => toast.show({\n          title: "Quick Toast",\n          description: "This toast will disappear in 2 seconds",\n          duration: 2000\n        })} variant="outline">\r\n            Short Duration (2s)\r\n          </Button>\r\n          <Button onClick={() => toast.show({\n          title: "Persistent Toast",\n          description: "This toast will stay until dismissed",\n          duration: Number.POSITIVE_INFINITY\n        })} variant="outline">\r\n            Persistent Toast\r\n          </Button>\r\n        </div>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Toast notifications with custom durations, including a persistent toast that stays until dismissed."\n      }\n    }\n  }\n}',...CustomDuration.parameters?.docs?.source}}},MultipleToasts.parameters={...MultipleToasts.parameters,docs:{...MultipleToasts.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      const showMultipleToasts = () => {\n        toast.info({\n          title: "Process Started",\n          description: "Your request is being processed"\n        });\n        setTimeout(() => {\n          toast.success({\n            title: "Step 1 Complete",\n            description: "First step completed successfully"\n          });\n        }, 1000);\n        setTimeout(() => {\n          toast.success({\n            title: "Step 2 Complete",\n            description: "Second step completed successfully"\n          });\n        }, 2000);\n        setTimeout(() => {\n          toast.success({\n            title: "Process Complete",\n            description: "All steps completed successfully"\n          });\n        }, 3000);\n      };\n      return <Button onClick={showMultipleToasts}>Show Multiple Toasts</Button>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Demonstrating how multiple toast notifications stack and appear in sequence."\n      }\n    }\n  }\n}',...MultipleToasts.parameters?.docs?.source}}},ToastUsageExample.parameters={...ToastUsageExample.parameters,docs:{...ToastUsageExample.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ToastDemo = () => {\n      const showProgressToast = () => {\n        const id = toast.info({\n          title: "Uploading File",\n          description: "Starting upload process...",\n          duration: Number.POSITIVE_INFINITY\n        });\n\n        // Simulate progress updates\n        setTimeout(() => {\n          toast.update(id, {\n            description: "Uploading: 25% complete"\n          });\n        }, 1000);\n        setTimeout(() => {\n          toast.update(id, {\n            description: "Uploading: 50% complete"\n          });\n        }, 2000);\n        setTimeout(() => {\n          toast.update(id, {\n            description: "Uploading: 75% complete"\n          });\n        }, 3000);\n        setTimeout(() => {\n          toast.update(id, {\n            title: "Upload Complete",\n            description: "Your file has been uploaded successfully",\n            status: "success",\n            duration: 3000\n          });\n        }, 4000);\n      };\n      return <div className="p-6 border rounded-lg space-y-4">\r\n          <h2 className="text-xl font-semibold">File Upload Example</h2>\r\n          <div className="flex items-center gap-2">\r\n            <Button onClick={showProgressToast}>Upload File</Button>\r\n            <Button variant="outline" onClick={() => toast.error({\n            title: "Upload Failed",\n            description: "There was an error uploading your file. Please try again."\n          })}>\r\n              Simulate Error\r\n            </Button>\r\n          </div>\r\n        </div>;\n    };\n    return <ToastDemo />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "A practical example showing how toasts can be used in a file upload scenario with progress updates."\n      }\n    }\n  }\n}',...ToastUsageExample.parameters?.docs?.source}}}}}]);